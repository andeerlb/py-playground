# Django ships with dozens of built-in field types; you can find the complete list in the model field reference
# https://docs.djangoproject.com/en/5.2/ref/models/fields/#model-field-types

from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

# This model above (Person) will create this SQL Script
# CREATE TABLE myapp_person (
#     "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
#     "first_name" varchar(30) NOT NULL,
#     "last_name" varchar(30) NOT NULL
# )


class PersonWithChoice(models.Model):
    SHIRT_SIZES = {
        "S": "Small",
        "M": "Medium",
        "L": "Large",
    }
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

# The first element in each tuple is the value that will be stored in the database. 
# The second element is displayed by the fieldâ€™s form widget.
# Given a model instance, the display value for a field with choices can be accessed using the get_FOO_display() method. 
# For example:
# >>> p = Person(name="Fred Flintstone", shirt_size="L")
# >>> p.save()
# >>> p.shirt_size
# 'L'
# >>> p.get_shirt_size_display()
# 'Large'

# You can also use enumeration classes to define choices in a concise way:
class Runner(models.Model):
    MedalType = models.TextChoices("MedalType", "GOLD SILVER BRONZE")
    name = models.CharField(max_length=60)
    medal = models.CharField(blank=True, choices=MedalType, max_length=10)

# relationship
class Musician(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=100)


class Album(models.Model):
    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    num_stars = models.IntegerField()

# ForeignKey, ManyToManyField and OneToOneField require the first argument to be a model class, so use the verbose_name keyword argument:

poll = models.ForeignKey(
    Poll,
    on_delete=models.CASCADE,
    verbose_name="the related poll",
)
sites = models.ManyToManyField(Site, verbose_name="list of sites")
place = models.OneToOneField(
    Place,
    on_delete=models.CASCADE,
    verbose_name="related place",
)